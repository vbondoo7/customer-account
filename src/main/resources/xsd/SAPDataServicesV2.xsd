<?xml version="1.0" encoding="UTF-8"?>
    <xsd:schema xmlns="http://businessobjects.com/service/SingleAddressTransactional/input" elementFormDefault="qualified" targetNamespace="http://businessobjects.com/service/SingleAddressTransactional/input" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
      <xsd:annotation>
        <xsd:documentation xml:lang="en">
          XML Schema generated by Greg Lambert, SolutionsWorkforce, LLC., www.solutionsworkforce.com

        </xsd:documentation>
      </xsd:annotation>
      <xsd:simpleType name="DIType-varchar-60">
        <xsd:restriction base="xsd:string">
          <xsd:maxLength value="60"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:element name="SingleAddressTransactionalIn">
        <!-- 
    The input element SingleAddressTransactionalIn provides a means to represent almost any address format using multiline input.
    See the examples below for ideas of how addresses can be formatted.  There are many alternatives.  Note that blank elements should
    exist and be mapped to null or blank.  The Country can be blank as DataServices will default to the United States, however it 
    is best practice to include it for completeness.

    Some possible formats for illustrative purposes.

    <SingleAddressTransactionalIn>
	   <address1>417 Main St</address1>
	   <address2>Apt 4</address2>
	   <address3>Madison, WI 53711</address3>
	   <address4></address4>
	   <address5></address5>
	   <address6></address6>
	   <address7></address7>
	   <address8></address8>
	   <country>United States</country>
    </SingleAddressTransactionalIn>  

    Note regarding the address city, locality and postcode information, both of the formats below are acceptable, but the first
    example is preferred.

    <SingleAddressTransactionalIn>
	   <address1>417 Main St, Apt 4</address1>
	   <address2>Madison, WI 53711</address2>    * This is preferred
	   <address3></address3>
	   <address4></address4>
	   <address5></address5>
	   <address6></address6>
	   <address7></address7>
	   <address8></address8>
	   <country>United States</country>
    </SingleAddressTransactionalIn>

    <SingleAddressTransactionalIn>
	   <address1>Apt 4</address1>
	   <address2>417 Main St</address2>             
	   <address3>Madison</address3>              * This is acceptable
	   <address4>WI</address4>                   *
	   <address5>53711</address5>                *
	   <address6></address6>
	   <address7></address7>
	   <address8></address8>
	   <country>United States</country>
    </SingleAddressTransactionalIn>
-->
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element ref="address1"/>
            <xsd:element ref="address2" minOccurs="0"/>
            <xsd:element ref="address3" minOccurs="0"/>
            <xsd:element ref="address4" minOccurs="0"/>
            <xsd:element ref="address5" minOccurs="0"/>
            <xsd:element ref="address6" minOccurs="0"/>
            <xsd:element ref="address7" minOccurs="0"/>
            <xsd:element ref="address8" minOccurs="0"/>
            <xsd:element ref="country"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="address1" type="DIType-varchar-60"/>
      <xsd:element name="address2" type="DIType-varchar-60"/>
      <xsd:element name="address3" type="DIType-varchar-60"/>
      <xsd:element name="address4" type="DIType-varchar-60"/>
      <xsd:element name="address5" type="DIType-varchar-60"/>
      <xsd:element name="address6" type="DIType-varchar-60"/>
      <xsd:element name="address7" type="DIType-varchar-60"/>
      <xsd:element name="address8" type="DIType-varchar-60"/>
      <xsd:element name="country" type="DIType-varchar-60"/>
    </xsd:schema>